# -*- coding: utf-8 -*-
"""ASST5.1-10.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fthhlgiiMXxkqdGRDz4WNPME74zMXkVp

ASSIGNMENBT 5.1

QN 1
"""

#Design of Slab
#Given Data
#Effective span is already given in question
span= float(input("Enter the value of effective span in meters:"))
b= float(input("Enter the value of width of slab in mm:"))
bs= float(input("Entert the value of Support Width in meters:"))
fck = float(input(" Enter the value of Characteristics Compressive Strength:"))
fy = float(input("Enter the value of grade of steel:"))
Es = float(input("Enter the value of Modulus of Elasticity is:"))
LL = float(input("Enter the value of Live Load:"))
FF = float(input("Enter the value of Floor Finish:"))
Density = float(input("Enter the value of Density of RCC:"))
# Design Constants
# Neutral Axis Factor
ku=0.0035/((0.0055)+(fy/(1.15*Es)))
print("The value of Neutral Axis Factor (ku) is:", ku)
# Moment of Resistan ce Facor
Ru= 0.36*fck*ku*(1-(0.42*ku))
print("The value of Moment Resisteance factor (Ru) is:", Ru)
#Assurming pt 0.5 from fig.4 from IS 456:2007 page no.38
fs=float(input("Ent er the value of Steel Stress of Service:"))
#From Graph find out the Modification Factor
MF=float(input("Enter the value of Modification Factor:"))
#From Clause 23.2.1 Select span/d Ratio
S=float(input("Enter the value of span/d ratio:"))
#Correction Factors
k1=float(input("Enter the value of Correction factor if sapn> 10m (k1):"))
k2= float(input(" Enter the value of Tension r/f correction factor (k2):"))
k3= float(input ("enter the value of Compression r/f correction factor (k3):"))
k4= float (input(" Enter the value of correction factor in case of flanged section (k4):"))
# Effective depth
d1=(span*1000)/(S*MF*k1*k2*k3*k4)
print("The value of effective depth as per deflection criteria is:", d1)
# Define Effective depth and overall depth Assuming value of cover
d = float(input("Enter the value of Effective depth in mm (d):"))
D= float(input("Enter the value of Overall depth in mm (D):"))
# Load Calculations
# Self Weight of slab
DL=D*Density/1000
print("The Dead load is:", DL)
# Total Load is
Factor=float(input("Enter the value of partial Safety Factor is: "))
TL=DL+LL+FF
print("The value of total load is:", TL)
Wu=Factor*TL
print("Wu=", Wu)
# Bendingf Moment Calculations (Mu)
Mu= Wu*span*span/8
print("The Value of Bending Moment (Mu) is:", Mu)
# Check for effective depth
d2=(Mu*1000000/(Ru*b))**0.5
print("The value of Effective depth as per Mornent criteria:", d2)
if d2>d:
 print ("Revise the Depth:")
else:
 print ("'SAFE")
d = float(input("Enter the value of Effective depth in mm (d):"))
print("Minimum Steel Calculations")
Astmin = 0.12*b*D/100
print("The value of Minimum steel is:", Astmin)
print("Main Steel calculations'")
Ast=((0.5*fck*b*d)/(fy))*(1-((1-((4.6*Mu*1000000)/(fck*b*d*d)))**0.5))
print("Ast:", Ast)
print("Check for Ast")
if Ast<Astmin:
 print("Take Ast=Astmin")
else:
 print("Ast>Astmin, Hence SAFE")
dia1 = float(input("Enter the value of bar diameter for main steel:"))
dia2 = float(input(" Enter the value of bar diameter for Distribution steel:"))
#Area of bar
ao1 = 0.7854*dia1*dia1
print("The Value of Area of main steel bar (ao1):", ao1)
ao2= 0.7854* dia2*dia2
print("The Value of Area of main steel bar (ao2):", ao2)
# Sapcing Calculations
Spacing1 = ao1*b/Ast
print("The sapcing for main steel bars is;", Spacing1)
Spacing2=ao2*b/Astmin
print("The sapcing for distribution steel bars is;", Spacing2)
print("Check 1 for main steel")
if Spacing1>300:
 print("UNSAFE")
else:
 print("SAFE")
print("'Check 2 for main steel")
if Spacing1 > 3*d:
 print("UNSAFE")
else:
 print("SAFE")
print("Check 1 fon Distribution steel")
if Spacing1>300:
 print("UNSAFE")
else:
 print("SAFE")
print("Check 2 for Distribution steel")
if Spacing1>5*d:
 print("UNSAFE")
else:
 print("SAFE")
print("Approximated values of Sapcing:")
S1= float(input("Enter the value of spacing of main bars:"))
S2=float(input("Enter the value of spacing of distribution bars:"))
Astprovided=ao1*b/S1
print("The provided steel area for main bars at section in mm^2 is:", Astprovided)
Astprodist=ao2*b/S2
print("The provided steel area for distribution bars at section in mm^2 is: ", Astprodist)
# Check for Shear
Vu=(Wu*span/2)-(Wu*((bs/2)-(d/1000)))
print("The value of SF at a Section is:", Vu)
Stress=(Vu*1000)/(b*d)
print("The vaiue of shear stress is:", Stress)
# From table 20 IS 456:2007 page 73
Stressmax = float(input("Enter the value of maximum Shear stress:"))
if Stress>Stressmax:
 print("Crushing will happen")
else:
 print("SAFE")
pt=(100*Ast)/(b*d)*120
print("Enter the value of percentage steel is:", pt)
#From table 19 IS 456:2007 page 73
SS=float(input("Enter the value of Shear Stress is:"))
k=float(input("Enter the value of depth factor:"))
Shear=k*SS
print("The value of shear at section is, Shear")
if Stress>Shear:
 print("Shear Reinforcement Required")
else:
 print("Shear Reinforcement not Required, SAFE")
# Check for Deflection
ActDEF=span*1000/d
print("The value od span/d is:", ActDEF)
# Actual Deflection
MaxDEF=S*MF*k1*k2*k3*k4
print("The permissible deflection is:", MaxDEF)
if MaxDEF>S/d:
 print("SAFE")
else:
 print("UNSAFE")
# Check for Anchorage Length
M1=0.87*fy*Ast*(d*(fy*Ast)/(fck*b))
print("The value of Moment (M1)'", M1)
lo = 8*dia1
La = 1.3*(M1/Vu)+10
print ("The value of Anchorage length is:", La)
# Development Length
bonds = float(input("Enter the value of Bond Stress:"))
Ld = 0.87*fy*dia1/4*bonds*1.6
print("The value of Development length is:", Ld)
if La>Ld:
 print("'SAFE")
else:
 print("increase anchorage")

"""ASSIGNMENT 6

QN 1
"""

# Stress When depth is constant
Q = float(input("Enter the value of Load in kN:"))
N= int(input("Number of data values of radial distance:"))
pi = 3.14159265359
Z = float(input("Depth:"))
r = []
for i in range (1, N+1):
  print("Enter radial distance in m".format (i))
  Value_r = float(input())
  r.append(Value_r)
  Stress =((3*Q)/(2*pi*Z*Z))*(((1/(1+((Value_r/Z)**2))))**2.5)
  print("Stress:",Stress,"kN/m^2")

"""QN 2"""

# Stress when Radius is Constant
Q = float(input("Enter the value of Load in kN:"))
M= int(input ("Number of data values of depth:"))
pi = 3.14159265359
r = float(input("Radial Distance:"))
Z = []
for j in range (1, M+1):
  print ("Enter depth in z".format (i))
  Value_Z = float(input())
  Z.append(Value_Z)
  Stress = ((3*Q)/(2*pi*Value_Z* Value_Z))*(((1/(1+((r/Value_Z)**2)))))**2.5
  print("Stress:", Stress,"kN/m^2")

"""QN 3"""

# Calculating the stress by Boussineq's Theory
Q= int(input("Enter the value of given load:"))
z= int(input("Enter the distance of vertical stress:"))
r= int(input("Enter the distance ofhorizntal stress:"))
stress = ((3*Q*(1/(1+(r/z)**2))**2.5))/(2*3.14*(z**2))
print("The value of stress is", stress)

"""ASSIGNMENT 7

QN 1
"""

#To Determine the bearing capacity of soil with water table
BulkDensity =float(input("Enter the value of Bulk Density of soil:"))
SatDensity = float(input("Enter the value of Saturated Density of soil:"))
WaterDensity = float(input("Enter the unit Weight of Water:"))
Df= float(input("Enter the value of depth of footing:"))
Dw = float(input("Enter the value of water table above footing level:"))
Dw1= float(input("Enter the value of Water table below the level of footing:"))
B= float(input("Enter the value of width of footing:"))
Nq= float(input("Enter the vaiue of Nq:"))
N= float(input("Enter the value of N ganna (N):"))
SubDensity=float(input())
print("Submerged Weight of soil is:", SubDensity)
#The bearing capacity of soil when water table is at ground
print("CASE A")
qu=(SubDensity*Df*Nq)+(0.5*0.8*B*SubDensity*N)
print("The value of ultimate bearing capacity of soil is:", qu)
#Approximate calculation of Bearing capacity of soil is.
Rw= 0.5+0.5*(Dw/B)
print("The value of Rw is:", Rw)
Rw1=0.5+0.5*(Dw1/8)
print("The value of Rw1 is:", Rw1)
qu=(BulkDensity*Df*Nq*Rw) + (0.5*0.8*8*BulkDensity*N*Rw1)
print("The value ultimate bearing capacity of soil is:", qu)
# Case B
print("CASE B")
qu=(BulkDensity*Df*Nq)+(0.5*0.8*8*SubDensity)
print("The value of ultimate bearing capacity is:", qu)
Dw = float(input("Enter the value of water table above footing level:"))
Dw1 = float(input("Enter the value of Water table below the level of footing:"))
print("The approximate value of ultimate bearing capacity is: ")
Rw=0.5+0.5*(Dw/B)
print("The value of Rw is:", Rw)
Rw1= 0.5 + 0.5* (Dw1/8)
print("The value of Rw1 is:", Rw1)
qu=(BulkDensity*Df*Nq*Rw)+(0.5*0.8*8*BulkDensity*Rw1)
print("The approximate value of ultimate hearing capacity is: ", qu)
# Case C
print("CASE C")
x = float(input("Enter the value of depth of water below footing:"))
qu=(BulkDensity*Df*Nq)+(0.5*0.8*((BulkDensity*x)+(SubDensity*(B-x)))*N)
print("The value of ultimate bearing capacity is:", qu)
Dw = float(input("Enter the value of water table above footing level:"))
Dw1= float(input("Enter the value of Water table below the level of footing:"))
print("The approximate value of ultimate bearing capacity is:")
Rw= 8.5+ 8.5*(Dw/B)
print("The value of Rw is:", Rw)
Rw1 = 0.5 + 0.5*(Dw1/8)
print("The value of Rwl is: ", Rw1)
qu= (BulkDensity*Df*Nq*Rw)+(0.5*0.8*8*BulkDensity*N*Rw1)
print("the value of ultimate bearing capaciy is:", qu)

"""QN 2"""

#To find the ultimate load carring capacity of pile
UCS = float(input("Enter the value of UCS of soil:"))
Cu = UCS/2
B = float(input("Enter the value of dimension of pile:"))
a=float(input("Enter the length of pile:"))
Alpha =float(input("Enter the value of adhesion factor:"))
Nc=float(input("The value of Nc: "))
Ab=B*B
print("the Base area of footing is:", Ab)
As=4*B*a
print("The value of chohesion of soil is:", Cu)
Qpu=Cu*Nc*Ab
print("'Qpu:", Qpu)
Qf=Alpha*Cu*As
print("Qf:", Qf)
Qu=Qpu+Qf
print("the value of load carring capacity of pile is (Qu):", Qu)

"""QN 3"""

# To Determine the bearing capacity of soil with water table
BulkDensity = float(input("Enter the value of Bulk Density of soil:"))
SatDensity = float(input("Enter the value of Saturated Density of soil:"))
WaterDensity = float(input("Enter the unit Weight of Water:"))
Df = float(input("Enter the value of depth of footing:"))
B = float (input ("Enter the value of width of footing:"))
Nq = float(input("Enter the value of Ng:"))
N_Gamma = float (input ("Enter the value of N gamma (N):"))
SubDensity = SatDensity - WaterDensity
print ("Submerged Weight of soil is:", SubDensity)
M = int (input("Number of data values of Water table above footing level: "))
N = int (input("Number of data values of Water table below footing level: "))
Dw = []
Dw1 = []
for i in range (1, M+1) :
  print ("Enter the value of water table above footing level measured w.r.t. ground (Dw) :")
  Depth_Dw = float(input())
  Dw.append(Depth_Dw)
  Rw =0.5+0.5*(Depth_Dw/B)
  print("The value of Rw is:", Rw)
for j in range (1, N+1):
  print("Enter the value of water table above footing level measured w.r.t. ground (Dw1): ")
  Depth_Dw1 = float(input())
  Dw.append(Depth_Dw1)
  Rw1 =0.5+0.5*(Depth_Dw1/B)
  print("The value of Rw1 is:", Rw1)
  qu=(BulkDensity*Df*Nq*Rw)+(0.5*0.8*B*BulkDensity*N_Gamma*Rw1)
  print ("'qu: ", qu, "kN/m^2")

"""ASSIGNMENT 8

QN 1
"""

#To determine alkalinity of given sample
H2SO4_req = float(input("Enter the volume ofH2SO4 required in ml:"))
Sample = float(input("Enter the value of sample inlitres:"))
Alkalinity_Removed=H2SO4_req
print("Alkalinity_Removed:", Alkalinity_Removed,"mg")
Alk_mg_per_lit = Alkalinity_Removed/ Sample
print("Total Alkalinity:",Alk_mg_per_lit,"mg/lit")
OH= float (input("Enter the value of OH-Alkalinity present : "))
#Alkalinity removed till pH of 8.3
H2SO4_req = float (input("Enter the volume ofH2S04 required in ml :"))
Alkalinity_Removed = H2SO4_req
print("Alkalinity_Removed: ",Alkalinity_Removed, "mg")
CO3_Combined = Alkalinity_Removed/Sample
print ("Carbonate Alkalinity upto pH8.3:",CO3_Combined, "mgperlit" )
CO3=CO3_Combined-OH
print("Carbonate Alkalinity:", CO3,"'mg/lit")
HCO3 =Alk_mg_per_lit - 2*CO3-OH
print("Bicarbonate Alkalinity:", HCO3, "mg/it")

"""ASSIGNMENT 9

QN 1
"""

#To find BOD at 7th day 25C
#To find Decay Coefficient at 25C
K1=float(input("Decay Coefficient:"))
T= int(input("Temperature of 3rd day BOD:"))
T1=int(input("Temperature of 7th day BOD:"))
K2 = (K1*(1.047)**(T1-T))
print("The value ofK2 is:", K2)
#To find Ultimate BOD
e=float("2.718")
print("The value ofe is:", e)
B1=float(input("BOD at 3rd day 20c:"))
t=float(input("time in days for finding B1:"))
E=(1-e**(-0.23*t))
print("The value ofE is:", E)
l0=(B1/E)
print("The value of 10 is:", l0)
#To find BOD at 7th day 25C
#B2 = float(input("BoD at 7rd day 25c:"))
t1 =float(input("time in days for findinfB2:"))
E1 =(1-e**(-0.289*t1))
print("The value ofEl is:", E1)
B2 = (l0*E1)
print("The value of B2 is:", B2)

"""QN 2"""

#Determination if density of sludge removed from aeration tank
M= float(input("Enter the value of initial mass :"))
S=float(input("Enter the value ofsolid containing sludge inpercentage:"))
Gs= float(input("Enterthe value of Specific gravity ofsludge solid:"))
Rho_W= float(input("Enter the value of density of water:"))
Ws = ((S/M)*100)
m =M- Ws
print("the value ofmass of water", m)
print("The value of Solid Content in sludge", Ws)
Vw =m/Rho_W
print("The Value of Volume", Vw)
Rho_S =Gs*Rho_W
print("The value ofDensity of solid content in sludge", Rho_S)
Vs=(Ws/(Gs*Rho_S))
print("The value of volume of solid content in sludge", Vs)
Vt=Vw+Vs
print("The value of total volume of solid content in sludge", Vt)
Rho_SL= M/Vt
print("The value of Density of sludge removed from aeration", Rho_SL)

"""ASSIGNMENT NO 10

QN 1
"""

# Design of tension member
Tu=float(input("Enter the value of ultimate tensile strength:"))
fy=float(input("Enter the value of yield strength of steel:"))
fu= float(input("Enter the value of ultimate strength of steel:"))
fub=float(input("Enter the value of ultimate strength of bolt:"))
Gamma_mo= float(input("Enter the value of partial factor of safety Garmma mo:"))
Gamma_m1= float(input("Enter the value of partial factor of safety Garmma_m1:"))
Gamma_mb= float(input("Enter the value of partial factor of safety Gamma_mb:"))
print("Gross Area Required")
Agreq=1.1*Tu*1000/fy
print("The value of gross area required is:", 1.2*Agreq)
#Selection of section
#Selecting ISA 100x65x8
Ag= float(input("Enter the value of gross area of steel is:"))
Lcl= float(input("Enter the length of connected leg:"))
Lol= float(input("Enter the length of outstand leg:"))
t= float(input("Entert the value of least thickness: "))
Ag= 1257
#Design of connections
d= float(input("Enter the value of diameter of bolt:"))
do=d+2
print("The diameter of bolt hole is:", do)
# As per IS code minimum pitch distance is
pmin =2.5*d
print("The minimum pitch is:", pmin)
#Edge distance as per IS 800 is
e=1.5*do
print("Enter the value of edge distance:", e)
nn=float(input("Number of shear planes with threaded intercepting the shear plane:"))
ns= float(input("Number of shear plane without threads:"))
Anb=0.78*0.7854*d*d
print("threaded area of bolt is:", Anb)
Asb=0.7854*d*d
print("plane shank area of bolt is:", Asb)
Vdsb=(fub/(1.732*Gamma_mb)*(nn*Anb+ns*Asb)*10**-3)
print("The value of Vdsb:", Vdsb)
kb1=e/(3*do)
print("Kb1:", kb1)
kb2=(pmin/(3*do))-0.25
print("Kb2:", kb2)
kb3=fub/fu
print("Kb3:", kb3)
kb4 = 1
print("Kb4:", kb4)
kb= min(kb1,kb2,kb3,kb4)
print("Kb:", kb)
Vdpb=(2.5*kb*d*t*fu*10**-3)/Gamma_mb
print("Vdpb:", Vdpb)
Vd = min(Vdsb ,Vdpb)
print("Vd:", Vd)
N=Tu/Vd
print("Number of bolts requird:", N)
N= float(input("Enter the value of number of bolts:"))
# Check for strength
# Criteria 1 Yeilding of Gross Section
Tdg=(Ag*fy*10-3)/Gamma_mo
print("The value of tensile strength due to yielding of gross section is:", Tdg)
# Criteria 2 Rupture
Anc = (Lcl-(t/2)-do)*t
print("Net Area of Connecting leg is: (Anc):", Anc)
Ago=(Lol-(t/2))*t
print("Gross Area of outstand leg is: (Anc):", Ago)
Lc=(N-1)*pmin
print("Le:", Lc)
bs=(0.6*Lcl)+(Lol*t)
print("bs:", bs)
Beta1=((fu/Gamma_m1)*(fy/Gamma_mo))
print("Beta:1", Beta1)
Beta2=(1.4-(0.076*(fy/fu)*(bs/Lc)*(Lol/t)))
print("Beta:2", Beta2)
Beta=min(Beta1,Beta2)
print("Beta:",Beta)
print("Check 1")
if Beta>1.4:
  print("Not Safe")
else:
  print("Safe")
  print("Check 2")
if Beta<0.7:
  print("Not Safe")
else:
  print("Safe")
Tdn=((0.9*fu*Anc)/Gamma_m1) + (Beta*Ago*fy/Gamma_mo)
print("'Tdn:", Tdn)
# Criteria 3 Block Shear
Avg=(pmin*(N-1)+e)*t
print("Avg:", Avg)
Avn=((pmin*(N-1) +e)-(N-1)*do+(8.5* do))*t
print("Avn:", Avn)
Atg=0.6*Lcl*t
print("Atg:", Atg)
Atn= Atg*(0.5*do)
print("Atn:", Atn)
Tb1 =((Avg*fy)/(1.732 *Gamma_mo))+((0.9* fu*Atn)/(Gamma_m1))*10**-3
print("Tb1:", Tb1)
Tb2 =((0.9*Avn*fu)/(1.732* Gamma_m1))+((Atg*fy)/(Gamma_mo))*10**-3
print("Tb2:", Tb2)
Tb = min(Tb1, Tb2)
print("Tb", Tb)
Td = min(Tdg,Tb)
print("Td", Td)
if Td>Tu:
  print("SAFE")
else:
  print("Revise the Section")